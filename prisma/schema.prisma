// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
		url      = env("DATABASE_URL")
}

model User {
	id			Int         @id @default(autoincrement())
	createdAt	DateTime    @default(now())
	updatedAt	DateTime    @updatedAt
	email		String      @unique
	name      	String      @unique
	password  	String
	levels    	Level[]		
	confirmed 	Boolean     @default(false)
	code		String?
	codeIssued	DateTime	@default(now())
	tier		Int			@default(0)
	votes		UserLevelVote[]
	scores		UserLevelScore[]
	comments	UserLevelComment[]
	reset			UserPasswordReset?
}


model Level {
	id				Int         		@id @default(autoincrement())
	createdAt		DateTime    		@default(now())
	updatedAt		DateTime    		@default(now())
	code			String      		@db.Text
	author			User        		@relation(fields: [authorId], references: id)
	authorId		Int
	title			String				@db.VarChar(50) @unique
	description		String?				@db.Text
	downloads		Int					@default(0)
	likes			Int					@default(0)
	dislikes		Int					@default(0)
	votes			UserLevelVote[]
	scores			UserLevelScore[]	@relation("level")
	comments		UserLevelComment[]
	verification	UserLevelScore?		@relation(fields: [verificationId], references: id, name: "verify")
	verificationId	Int?				@unique
	version						Int					@default(1)
}

model UserPasswordReset {
	user			User		@relation(fields: [userId], references: [id])
	userId		Int			@unique
	email			String	@unique
	code			String
	issued		DateTime		@default(now())
}

model UserLevelComment {
	id			Int			@id @default(autoincrement())
	user		User		@relation(fields: [userId], references: [id])
	userId		Int
	level		Level		@relation(fields: [levelId], references: [id])
	levelId		Int
	createdAt	DateTime	@default(now())
	updatedAt	DateTime	@default(now())
	comment		String		@db.Text
}

model UserLevelVote {
	user		User		@relation(fields: [userId], references: [id])
	userId		Int
	level		Level		@relation(fields: [levelId], references: [id])
	levelId		Int
	createdAt	DateTime	@default(now())
	updatedAt	DateTime	@default(now())
	vote		Int

	@@id([userId, levelId])
}

model UserLevelScore {
	id			Int			@unique @default(autoincrement())
	createdAt	DateTime    @default(now())
	updatedAt	DateTime    @updatedAt
	user		User		@relation(fields: [userId], references: [id])
	userId		Int
	level		Level		@relation(fields: [levelId], references: [id], name: "level")
	levelId		Int
	time		Float
	version		String		@db.VarChar(10)
	replay		Bytes
	alt			Boolean		@default(false)
	verifies	Level?		@relation("verify")
	levelVersion	Int			@default(1)

	@@id([id, userId, levelId])
}
